{"ast":null,"code":"import doctorImage from '@/assets/doctor.png';\nimport axios from 'axios';\nexport default {\n  props: {\n    doctor: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      doctorImage: doctorImage,\n      showAppointmentModal: false,\n      selectedPatient: '',\n      patients: [{\n        id: 1,\n        name: '张三'\n      }, {\n        id: 2,\n        name: '李四'\n      }, {\n        id: 3,\n        name: '王五'\n      }]\n    };\n  },\n  computed: {\n    // 从个人中心获取用户名、姓名和电话\n    currentUser() {\n      // 假设这些信息存储在另一个组件或者 Vuex store 中\n      // 这里只是一个示例，你需要根据实际情况调整\n      return {\n        username: this.$root.username,\n        // 从根组件获取用户名\n        name: this.$root.name,\n        // 从根组件获取姓名\n        phone: this.$root.phone // 从根组件获取电话\n      };\n    }\n  },\n  methods: {\n    bookAppointment(doctor) {\n      alert(`预约${doctor.name}在${doctor.VisitTime}`);\n    },\n    handlePayment() {\n      if (this.selectedPatient) {\n        const registrationTime = new Date();\n        registrationTime.setHours(registrationTime.getHours() + 8);\n        // 构建要发送到后端的数据对象\n        const RegistrationList = {\n          name: this.selectedPatient.name,\n          age: '18',\n          // 假设年龄信息需要从其他地方获取\n          phoneNumber: '13363618523',\n          // 假设电话号码信息需要从其他地方获取\n          department: this.doctor.department,\n          visitTime: this.doctor.visitTime,\n          registrationTime: registrationTime.toISOString(),\n          doctor_Name: this.doctor.name,\n          outpatientType: this.doctor.outpatientType,\n          accountName: 'user123' // 假设你有一个方法来获取当前登录用户的用户名\n        };\n\n        // 使用 axios 发送 POST 请求到后端\n        axios.post('/api/registrationLists/addRegistration', RegistrationList).then(response => {\n          // 请求成功，处理响应\n          console.log('Appointment successful:', response.data);\n          alert('预约成功！');\n          this.showAppointmentModal = false; // 关闭模态框\n        }).catch(error => {\n          // 请求失败，处理错误\n          console.error('Appointment failed:', error.response || error.message);\n          alert('预约失败，请重试。');\n        });\n      } else {\n        alert('请选择挂号人。');\n      }\n    },\n    formatDateTime(dateTimeString) {\n      const date = new Date(dateTimeString);\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const day = date.getDate().toString().padStart(2, '0');\n      const hours = date.getHours().toString().padStart(2, '0');\n      const minutes = date.getMinutes().toString().padStart(2, '0');\n      return `${year}-${month}-${day} ${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["doctorImage","axios","props","doctor","type","Object","required","data","showAppointmentModal","selectedPatient","patients","id","name","computed","currentUser","username","$root","phone","methods","bookAppointment","alert","VisitTime","handlePayment","registrationTime","Date","setHours","getHours","RegistrationList","age","phoneNumber","department","visitTime","toISOString","doctor_Name","outpatientType","accountName","post","then","response","console","log","catch","error","message","formatDateTime","dateTimeString","date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","hours","minutes","getMinutes"],"sources":["C:\\Users\\zsx\\Desktop\\新建文件夹\\hosptial-vue\\vue\\src\\components\\DoctorInfo.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-box\">\r\n    <div class=\"doctor-info\">\r\n      <div class=\"doctor-profile\">\r\n        <img :src=\"doctorImage\" alt=\"doctor photo\" />\r\n        <div>\r\n          <h3>{{ doctor.name }}</h3>\r\n          <p>{{ doctor.department }}</p>\r\n          <p>{{ doctor.outpatientType }}</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"appointment-options\">\r\n        <p>可预约时间：{{ formatDateTime(doctor.visitTime) }}</p>\r\n        <!-- 显示剩余号数 -->\r\n        <p v-if=\"doctor.remainingNumbers > 0\">剩余号数：{{ doctor.remainingNumbers }}</p>\r\n        <button @click=\"showAppointmentModal = true\">预约</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"fee\">挂号费 {{ doctor.cost }}元</div>\r\n  </div>\r\n\r\n  <!-- 模态窗口 -->\r\n  <div v-if=\"showAppointmentModal\" class=\"modal\">\r\n    <div class=\"modal-content\">\r\n      <span class=\"close\" @click=\"showAppointmentModal = false\">&times;</span>\r\n      <h2>预约医生：{{ doctor.name }}</h2>\r\n      <p>科室：{{ doctor.department }}</p>\r\n      <p>类型：{{ doctor.outpatientType }}</p>\r\n      <p>可预约时间：{{ formatDateTime(doctor.visitTime) }}</p>\r\n      <!-- 显示剩余号数 -->\r\n      <p v-if=\"doctor.remainingNumbers > 0\">剩余号数：{{ doctor.remainingNumbers }}</p>\r\n      <!-- 显示挂号费 -->\r\n      <p>挂号费：{{ doctor.cost }}元</p>\r\n      <label for=\"patient\">选择挂号人：</label>\r\n      <select id=\"patient\" v-model=\"selectedPatient\">\r\n        <option disabled value=\"\">请选择</option>\r\n        <option v-for=\"patient in patients\" :key=\"patient.id\" :value=\"patient\">{{ patient.name }}</option>\r\n      </select>\r\n      <!-- 支付按钮 -->\r\n      <button class=\"payment-button\" @click=\"handlePayment\">支付</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport doctorImage from '@/assets/doctor.png';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  props: {\r\n    doctor: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      doctorImage: doctorImage,\r\n      showAppointmentModal: false,\r\n      selectedPatient: '',\r\n      patients: [\r\n        { id: 1, name: '张三' },\r\n        { id: 2, name: '李四' },\r\n        { id: 3, name: '王五' }\r\n      ]\r\n    };\r\n  },\r\n  computed: {\r\n    // 从个人中心获取用户名、姓名和电话\r\n    currentUser() {\r\n      // 假设这些信息存储在另一个组件或者 Vuex store 中\r\n      // 这里只是一个示例，你需要根据实际情况调整\r\n      return {\r\n        username: this.$root.username, // 从根组件获取用户名\r\n        name: this.$root.name, // 从根组件获取姓名\r\n        phone: this.$root.phone, // 从根组件获取电话\r\n      };\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    bookAppointment(doctor) {\r\n      alert(`预约${doctor.name}在${doctor.VisitTime}`);\r\n    },\r\n    handlePayment() {\r\n      if (this.selectedPatient) {\r\n        const registrationTime = new Date();\r\n        registrationTime.setHours(registrationTime.getHours() + 8);\r\n        // 构建要发送到后端的数据对象\r\n        const RegistrationList = {\r\n          name:  this.selectedPatient.name ,\r\n          age: '18', // 假设年龄信息需要从其他地方获取\r\n          phoneNumber: '13363618523', // 假设电话号码信息需要从其他地方获取\r\n          department: this.doctor.department,\r\n          visitTime: this.doctor.visitTime,\r\n          registrationTime:  registrationTime.toISOString(),\r\n          doctor_Name: this.doctor.name,\r\n          outpatientType: this.doctor.outpatientType,\r\n          accountName: 'user123', // 假设你有一个方法来获取当前登录用户的用户名\r\n        };\r\n\r\n        // 使用 axios 发送 POST 请求到后端\r\n        axios.post('/api/registrationLists/addRegistration', RegistrationList)\r\n          .then(response => {\r\n            // 请求成功，处理响应\r\n            console.log('Appointment successful:', response.data);\r\n            alert('预约成功！');\r\n            this.showAppointmentModal = false; // 关闭模态框\r\n          })\r\n          .catch(error => {\r\n            // 请求失败，处理错误\r\n            console.error('Appointment failed:', error.response || error.message);\r\n            alert('预约失败，请重试。');\r\n          });\r\n      } else {\r\n        alert('请选择挂号人。');\r\n      }\r\n    },\r\n    formatDateTime(dateTimeString) {\r\n      const date = new Date(dateTimeString);\r\n      const year = date.getFullYear();\r\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = date.getDate().toString().padStart(2, '0');\r\n      const hours = date.getHours().toString().padStart(2, '0');\r\n      const minutes = date.getMinutes().toString().padStart(2, '0');\r\n\r\n      return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-box {\r\n  width: 30%;\r\n  min-width: 240px;\r\n  border: 1px solid #ddd;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  background-color: #fff;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.doctor-profile {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.doctor-profile img {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  margin-right: 20px;\r\n}\r\n\r\n.appointment-options {\r\n  margin-top: 20px;\r\n}\r\n\r\n.fee {\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n.modal {\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.modal-content {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 300px;\r\n}\r\n\r\n.close {\r\n  float: right;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n}\r\n\r\n/* 支付按钮样式 */\r\n.payment-button {\r\n  background-color: #3161FF; /* 蓝色背景 */\r\n  color: #ffffff; /* 白色文字 */\r\n  padding: 10px 20px; /* 内边距 */\r\n  border: none; /* 无边框 */\r\n  border-radius: 5px; /* 圆角 */\r\n  cursor: pointer; /* 鼠标指针 */\r\n  font-size: 16px; /* 文字大小 */\r\n  margin-top: 10px; /* 外边距 */\r\n  float: right;\r\n}\r\n\r\n.payment-button:hover {\r\n  background-color: #2980b9; /* 鼠标悬停时的背景颜色 */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}