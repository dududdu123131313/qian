{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"selection-container\"\n};\nconst _hoisted_3 = {\n  class: \"selection-row\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"selection-row\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"selection-row\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"results-container\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"results\"\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"no-results\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_doctor_info = _resolveComponent(\"doctor-info\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[8] || (_cache[8] = _createElementVNode(\"h1\", {\n    class: \"title\"\n  }, \"预约挂号\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 选择科室 \"), _createElementVNode(\"div\", _hoisted_3, [_cache[4] || (_cache[4] = _createElementVNode(\"span\", null, \"选择科室：\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.departments, department => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: department,\n      onClick: $event => $options.selectDepartment(department)\n    }, _toDisplayString(department), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedDepartment = $event),\n    class: \"selection-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.selectedDepartment]])]), _createCommentVNode(\" 选择类型 \"), _createElementVNode(\"div\", _hoisted_5, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", null, \"选择类型：\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.types, type => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: type,\n      onClick: $event => $options.selectType(type)\n    }, _toDisplayString(type), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedType = $event),\n    class: \"selection-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.selectedType]])]), _createCommentVNode(\" 选择日期 \"), _createElementVNode(\"div\", _hoisted_7, [_cache[6] || (_cache[6] = _createElementVNode(\"span\", null, \"选择日期：\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.dates, date => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: date,\n      onClick: $event => $options.selectDate(date)\n    }, _toDisplayString(date), 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.selectedDate = $event),\n    class: \"selection-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.selectedDate]])]), _createCommentVNode(\" 查询按钮 \"), _createElementVNode(\"button\", {\n    class: \"query-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.handleQuery && $options.handleQuery(...args))\n  }, \"查询\")]), _createCommentVNode(\" 结果容器 \"), _createElementVNode(\"div\", _hoisted_9, [$data.doctors.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.doctors, doctor => {\n    return _openBlock(), _createBlock(_component_doctor_info, {\n      key: doctor.id,\n      doctor: doctor\n    }, null, 8 /* PROPS */, [\"doctor\"]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _cache[7] || (_cache[7] = [_createElementVNode(\"p\", null, \"没有找到相关数据。\", -1 /* HOISTED */)])))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_Fragment","_renderList","$data","departments","department","onClick","$event","$options","selectDepartment","_hoisted_4","type","_cache","selectedDepartment","_hoisted_5","types","selectType","_hoisted_6","selectedType","_hoisted_7","dates","date","selectDate","_hoisted_8","selectedDate","args","handleQuery","_hoisted_9","doctors","length","_hoisted_10","doctor","_createBlock","_component_doctor_info","id","_hoisted_11"],"sources":["C:\\Users\\zsx\\Desktop\\12.15\\qian\\src\\components\\RegistrationComponent.vue"],"sourcesContent":["<!-- RegistrationComponent.vue -->\r\n<template>\r\n  <div class=\"container\">\r\n    <h1 class=\"title\">预约挂号</h1>\r\n        <div class=\"selection-container\">\r\n      <!-- 选择科室 -->\r\n      <div class=\"selection-row\">\r\n        <span>选择科室：</span>\r\n        <button v-for=\"department in departments\" :key=\"department\" @click=\"selectDepartment(department)\">\r\n          {{ department }}\r\n        </button>\r\n        <input type=\"text\" v-model=\"selectedDepartment\" class=\"selection-input\" />\r\n      </div>\r\n      <!-- 选择类型 -->\r\n      <div class=\"selection-row\">\r\n        <span>选择类型：</span>\r\n        <button v-for=\"type in types\" :key=\"type\" @click=\"selectType(type)\">\r\n          {{ type }}\r\n        </button>\r\n        <input type=\"text\" v-model=\"selectedType\" class=\"selection-input\" />\r\n      </div>\r\n      <!-- 选择日期 -->\r\n      <div class=\"selection-row\">\r\n        <span>选择日期：</span>\r\n        <button v-for=\"date in dates\" :key=\"date\" @click=\"selectDate(date)\">\r\n          {{ date }}\r\n        </button>\r\n        <input type=\"text\" v-model=\"selectedDate\" class=\"selection-input\" />\r\n      </div>\r\n    <!-- 查询按钮 -->\r\n    <button class=\"query-button\" @click=\"handleQuery\" >查询</button>\r\n    </div>\r\n\r\n  \r\n\r\n    <!-- 结果容器 -->\r\n    <div class=\"results-container\">\r\n      <div class=\"results\" v-if=\"doctors.length\">\r\n        <doctor-info\r\n          v-for=\"doctor in doctors\"\r\n          :key=\"doctor.id\"\r\n          :doctor=\"doctor\"\r\n        ></doctor-info>\r\n      </div>\r\n      <div class=\"no-results\" v-else>\r\n        <p>没有找到相关数据。</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport DoctorInfo from './DoctorInfo.vue';\r\n\r\nexport default {\r\n  components: {\r\n    DoctorInfo\r\n  },\r\n  data() {\r\n    return {\r\n      departments: ['康复科', '普外科', '中医科', '眼科', '口腔科', '皮肤科', '骨科', '风湿免疫科', '肿瘤科', '心内科', '传染科', '妇产科', '呼吸内科',\r\n        '儿科', '血液科', '泌尿外科', '耳鼻喉科', '神经内科', '急诊科', '内分泌科'],\r\n      types: ['专家门诊', '普通门诊'],\r\n      selectedDepartment: '',\r\n      selectedType: '',\r\n      selectedDate: '',\r\n      dates: [],\r\n      doctors: [],\r\n      showResults: false,\r\n\r\n    };\r\n  },\r\n  created() {\r\n    this.dates = this.generateDates(5);\r\n  },\r\n  methods: {\r\n    selectDepartment(department) {\r\n      this.selectedDepartment = department;\r\n    },\r\n    selectType(type) {\r\n      this.selectedType = type;\r\n    },\r\n    selectDate(date) {\r\n      this.selectedDate = date;\r\n    },\r\n    handleQuery() {\r\n      const encodedDepartment = encodeURIComponent(this.selectedDepartment);\r\n      const encodedType = encodeURIComponent(this.selectedType);\r\n      const encodedDate = encodeURIComponent(this.selectedDate);\r\n\r\n      // 验证日期格式是否正确\r\n      if (this.selectedDate && !/^\\d{4}-\\d{2}-\\d{2}$/.test(this.selectedDate)) {\r\n        alert('请输入正确的日期格式（例如：YYYY-MM-DD）');\r\n        return;\r\n      }\r\n\r\n\r\n      const queryUrl = `/doctors/query?department=${encodedDepartment}&outpatientType=${encodedType}&visitTime=${encodedDate}`;\r\n      axios.get(queryUrl)\r\n          .then(response => {\r\n            this.doctors = response.data;\r\n            this.showResults = true;\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching doctor info:', error);\r\n            if (error.response) {\r\n              alert('查询失败，请稍后重试。错误信息：' + error.response.data);\r\n            } else {\r\n              alert('网络连接异常，请检查网络后重试。');\r\n            }\r\n          });\r\n    },\r\n\r\n\r\n    generateDates(days) {\r\n      const dates = [];\r\n      const today = new Date();\r\n      for (let i = 0; i < days; i++) {\r\n        const nextDay = new Date(today);\r\n        nextDay.setDate(today.getDate() + i);\r\n        const year = nextDay.getFullYear();\r\n        const month = (nextDay.getMonth() + 1).toString().padStart(2, '0');\r\n        const day = nextDay.getDate().toString().padStart(2, '0');\r\n        dates.push(`${year}-${month}-${day}`);\r\n      }\r\n      return dates;\r\n    }\r\n  }\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start; \r\n  align-items: center;\r\n  margin-left:200px;\r\n  height: 100vh; /* 使容器占满整个视口高度 */\r\n  width: 100%; /* 沾满整个视口宽度 */\r\n  box-sizing: border-box; /* 确保 padding 不会影响宽度和高度 */\r\n  padding: 20px; /* 根据需要添加内边距 */\r\n}\r\n\r\n.title {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.selection-container {\r\n  border: 1px solid #ddd;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  margin-bottom: 20px;\r\n  background-color: white;\r\n}\r\n\r\n.selection-row {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  flex-wrap: wrap; /* 允许子元素换行 */\r\n}\r\n\r\n.selection-row button {\r\n  padding: 8px 16px; /* 按钮内边距 */\r\n  margin: 4px; /* 按钮外边距 */\r\n  border: 1px solid #ccc; /* 按钮边框 */\r\n  border-radius: 4px; /* 按钮圆角 */\r\n  background-color: #f8f8f8; /* 按钮背景颜色 */\r\n  cursor: pointer; /* 鼠标悬停时显示指针 */\r\n  flex: 1 1 auto; /* 允许按钮占据可用空间 */\r\n  min-width: 80px; /* 按钮的最小宽度 */\r\n  text-align: center; /* 文本居中 */\r\n}\r\n\r\n.selection-input {\r\n  margin-left: 10px;\r\n  border: 1px solid #ccc;\r\n  padding: 5px;\r\n  border-radius: 4px;\r\n  width: 200px;\r\n  margin-left: auto;\r\n}\r\n\r\n.query-button {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  background-color: #3161FF;\r\n  color: #ffffff;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-top: 20px; /* 添加上边距 */\r\n  display: block; /* 使按钮表现为块级元素 */\r\n  margin-left: auto; /* 右边距自动 */\r\n  margin-right: auto; /* 左边距自动 */\r\n  width: fit-content; /* 宽度适应内容 */\r\n}\r\n\r\n.query-button:hover {\r\n  background-color: #304add;\r\n}\r\n\r\n\r\n.results-container {\r\n  width: 90%;\r\n  height: 100%;\r\n  margin-top: 20px;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.results {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  display: flex;\r\n  justify-content: flex-start; /* 水平排列，从左到右 */\r\n  gap: 20px;\r\n}\r\n\r\n.doctor-info {\r\n  flex: 1 1 300px;\r\n  margin: 10px;\r\n  border: 0;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  background-color: transparent;\r\n}\r\n\r\n.no-results {\r\n  color: #999;\r\n  text-align: center;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}